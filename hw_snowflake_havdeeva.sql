-- 1. External Stage

  CREATE DATABASE havdeeva_hw;

  CREATE STORAGE INTEGRATION havdeeva_s3_int
    TYPE = EXTERNAL_STAGE
    STORAGE_PROVIDER = 'S3'
    ENABLED = TRUE
    STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::554739427960:role/havdeeva-snowflake'
    STORAGE_ALLOWED_LOCATIONS = ('*');


  CREATE OR REPLACE FILE FORMAT havdeeva_csv_format
    TYPE = 'CSV'
    COMPRESSION = 'AUTO'
    FIELD_DELIMITER = ','
    RECORD_DELIMITER = '\n'
    SKIP_HEADER = 1
    TRIM_SPACE = TRUE,
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE
    ;

  CREATE OR REPLACE FILE FORMAT havdeeva_parquet_format
    TYPE = 'PARQUET'
    COMPRESSION = AUTO 
    USE_LOGICAL_TYPE = TRUE 
    TRIM_SPACE = TRUE 
    ;
    
  CREATE OR REPLACE STAGE havdeeva_s3_stage
    STORAGE_INTEGRATION = havdeeva_s3_int
    URL = 's3://robot-dreams-source-data/'
    FILE_FORMAT = havdeeva_parquet_format
    ;


-- 2. Raw data loading

  CREATE OR REPLACE TABLE TAXI_ZONE_LOOKUP (
    LOCATIONID VARCHAR,
    BOROUGH VARCHAR,
    ZONE VARCHAR,
    SERIVCE_ZONE VARCHAR
  );

  COPY INTO TAXI_ZONE_LOOKUP
  FROM @havdeeva_s3_stage/home-work-1/nyc_taxi/taxi_zone_lookup.csv
  FILE_FORMAT = (FORMAT_NAME = havdeeva_csv_format)
  ;

  CREATE TABLE YELLOW_RAW (
    VENDORID BIGINT,
    TPEP_PICKUP_DATETIME TIMESTAMP,
    TPEP_DROPOFF_DATETIME TIMESTAMP,
    PASSENGER_COUNT BIGINT,
    TRIP_DISTANCE DOUBLE,
    RATECODEID BIGINT,
    STORE_AND_FWD_FLAG STRING,
    PULOCATIONID BIGINT,
    DOLOCATIONID BIGINT,
    PAYMENT_TYPE BIGINT,
    FARE_AMOUNT DOUBLE,
    EXTRA DOUBLE,
    MTA_TAX DOUBLE,
    TIP_AMOUNT DOUBLE,
    TOLLS_AMOUNT DOUBLE,
    IMPROVEMENT_SURCHARGE DOUBLE,
    TOTAL_AMOUNT DOUBLE,
    CONGESTION_SURCHARGE DOUBLE,
    AIRPORT_FEE DOUBLE
  );

  COPY INTO YELLOW_RAW
  FROM @havdeeva_s3_stage/home-work-1/nyc_taxi/yellow/
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE;
  
  CREATE TABLE GREEN_RAW (
    VENDORID BIGINT,
    LPEP_PICKUP_DATETIME TIMESTAMP,
    LPEP_DROPOFF_DATETIME TIMESTAMP,
    STORE_AND_FWD_FLAG STRING,
    RATECODEID BIGINT,
    PULOCATIONID BIGINT,
    DOLOCATIONID BIGINT,
    PASSENGER_COUNT BIGINT,
    TRIP_DISTANCE DOUBLE,
    FARE_AMOUNT DOUBLE,
    EXTRA DOUBLE,
    MTA_TAX DOUBLE,
    TIP_AMOUNT DOUBLE,
    TOLLS_AMOUNT DOUBLE,
    EHAIL_FEE DOUBLE,
    IMPROVEMENT_SURCHARGE DOUBLE,
    TOTAL_AMOUNT DOUBLE,
    PAYMENT_TYPE BIGINT,
    TRIP_TYPE DOUBLE,
    CONGESTION_SURCHARGE DOUBLE
);

  COPY INTO GREEN_RAW
  FROM @havdeeva_s3_stage/home-work-1/nyc_taxi/green/
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE;


-- 3. Data enrichment

  CREATE OR REPLACE TABLE YELLOW_ENRICHED AS
  SELECT 
    y.*,  
    pickup_zone.ZONE AS PICKUP_ZONE,
    dropoff_zone.ZONE AS DROPOFF_ZONE
  FROM 
    YELLOW_RAW y
  LEFT JOIN 
    TAXI_ZONE_LOOKUP pickup_zone
  ON 
    y.PULOCATIONID = pickup_zone.LOCATIONID
  LEFT JOIN 
    TAXI_ZONE_LOOKUP dropoff_zone
  ON 
    y.DOLOCATIONID = dropoff_zone.LOCATIONID
  ;
  
  CREATE OR REPLACE TABLE GREEN_ENRICHED AS
  SELECT 
    g.*,  
    pickup_zone.ZONE AS PICKUP_ZONE,
    dropoff_zone.ZONE AS DROPOFF_ZONE
  FROM 
    GREEN_RAW g
  LEFT JOIN 
    TAXI_ZONE_LOOKUP pickup_zone
  ON 
    g.PULOCATIONID = pickup_zone.LOCATIONID
  LEFT JOIN 
    TAXI_ZONE_LOOKUP dropoff_zone
  ON 
    g.DOLOCATIONID = dropoff_zone.LOCATIONID
  ;

  
-- 4. Transformations

  CREATE OR REPLACE TABLE YELLOW_FILTERED AS
  SELECT 
    *,
    CASE 
        WHEN TRIP_DISTANCE <= 2 THEN 'Short'
        WHEN TRIP_DISTANCE > 2 AND TRIP_DISTANCE <= 10 THEN 'Medium'
        ELSE 'Long'
    END AS TRIP_CATEGORY,
    EXTRACT(HOUR FROM TPEP_PICKUP_DATETIME) AS PICKUP_HOUR
  FROM 
    YELLOW_ENRICHED
  WHERE 
    TRIP_DISTANCE > 0
    AND TOTAL_AMOUNT > 0
    AND PASSENGER_COUNT BETWEEN 1 AND 6
    ;
    
  CREATE OR REPLACE TABLE GREEN_FILTERED AS
  SELECT 
    *,
    CASE 
        WHEN TRIP_DISTANCE <= 2 THEN 'Short'
        WHEN TRIP_DISTANCE > 2 AND TRIP_DISTANCE <= 10 THEN 'Medium'
        ELSE 'Long'
    END AS TRIP_CATEGORY,
    EXTRACT(HOUR FROM LPEP_PICKUP_DATETIME) AS PICKUP_HOUR
  FROM 
    GREEN_ENRICHED
  WHERE 
    TRIP_DISTANCE > 0
    AND TOTAL_AMOUNT > 0
    AND PASSENGER_COUNT BETWEEN 1 AND 6;

-- Aggregation by zones

  CREATE OR REPLACE TABLE YELLOW_AGGREGATED AS
    SELECT 
      PICKUP_ZONE,
      DROPOFF_ZONE,
      COUNT(*) AS TOTAL_TRIPS,
      AVG(TRIP_DISTANCE) AS AVG_TRIP_DISTANCE,
      AVG(TOTAL_AMOUNT) AS AVG_TOTAL_AMOUNT,
      AVG(TIP_AMOUNT) AS AVG_TIP_AMOUNT,
      MAX(TRIP_DISTANCE) AS MAX_TRIP_DISTANCE,
      MIN(TIP_AMOUNT) AS MIN_TIP_AMOUNT    
    FROM 
      YELLOW_FILTERED
    GROUP BY 
      PICKUP_ZONE, DROPOFF_ZONE
      ;

      
  CREATE OR REPLACE TABLE GREEN_AGGREGATED AS
    SELECT 
      PICKUP_ZONE,
      DROPOFF_ZONE,
      COUNT(*) AS TOTAL_TRIPS,
      AVG(TRIP_DISTANCE) AS AVG_TRIP_DISTANCE,
      AVG(TOTAL_AMOUNT) AS AVG_TOTAL_AMOUNT,
      AVG(TIP_AMOUNT) AS AVG_TIP_AMOUNT,
      MAX(TRIP_DISTANCE) AS MAX_TRIP_DISTANCE,
      MIN(TIP_AMOUNT) AS MIN_TIP_AMOUNT    
    FROM 
      GREEN_FILTERED
    GROUP BY 
      PICKUP_ZONE, DROPOFF_ZONE
      ;

-- 5. Time Travel

  DELETE FROM GREEN_ENRICHED
  WHERE TRIP_DISTANCE < 2
  ;

  SELECT * FROM GREEN_ENRICHED 
  BEFORE (TIMESTAMP => '2025-08-19 18:10:00')
  -- WHERE TRIP_DISTANCE < 2
  LIMIT 10
  ;

  CREATE OR REPLACE TABLE GREEN_RECOVERED AS
    SELECT * 
    FROM GREEN_ENRICHED 
    BEFORE (TIMESTAMP => '2025-08-19 18:10:00')
    WHERE TRIP_DISTANCE < 2
    ;

    
-- 6. Streams

  CREATE OR REPLACE STREAM yellow_enriched_stream ON TABLE yellow_enriched;

  INSERT INTO yellow_enriched 
  VALUES 
  (1, '2023-10-01 10:00:00', '2023-10-01 10:30:00', 2, 5.0, 1, 'N', 100, 200, 1, 20.0, 2.5, 0.5, 3.0, 0.0, 0.3, 26.3, 0.0, NULL, 'Zone A', 'Zone B'),
  (2, '2023-10-01 11:00:00', '2023-10-01 11:20:00', 1, 3.0, 1, 'N', 101, 201, 2, 15.0, 1.0, 0.5, 2.0, 0.0, 0.3, 18.8, 0.0, NULL, 'Zone C', 'Zone D');

  CREATE OR REPLACE TABLE yellow_changes_log AS
    SELECT * 
    FROM yellow_enriched_stream
    WHERE 1=0
    ;

    
-- 7. Tasks

-- Task to fill yellow_changes_log

  CREATE OR REPLACE TASK yellow_changes_task
  WAREHOUSE = HAVDEEVA_WH
  SCHEDULE = '60 MINUTE'
  AS
  INSERT INTO yellow_changes_log
  SELECT *
  FROM yellow_enriched_stream;

  EXECUTE TASK yellow_changes_task ;

  SELECT * FROM yellow_changes_log;

-- Task to make aggregations

  CREATE OR REPLACE TABLE zone_hourly_stats (
    PICKUP_HOUR INTEGER,
    PICKUP_ZONE STRING,
    AVG_DISTANCE FLOAT,
    AVG_TOTAL_AMOUNT FLOAT,
    TRIP_COUNT INTEGER
  );

  CREATE OR REPLACE TASK yellow_stats_task
    WAREHOUSE = HAVDEEVA_WH
    SCHEDULE = '60 MINUTE'
  AS
    INSERT INTO zone_hourly_stats
    SELECT 
        EXTRACT(HOUR FROM TPEP_PICKUP_DATETIME) AS PICKUP_HOUR,
        PICKUP_ZONE,
        AVG(TRIP_DISTANCE) AS AVG_DISTANCE,
        AVG(TOTAL_AMOUNT) AS AVG_TOTAL_AMOUNT,
        COUNT(*) AS TRIP_COUNT
    FROM yellow_enriched
    GROUP BY 
        EXTRACT(HOUR FROM TPEP_PICKUP_DATETIME),
        PICKUP_ZONE;

  EXECUTE TASK yellow_stats_task;

  SELECT * FROM zone_hourly_stats;


-- 8. Optional task to union data and create store procedure

  CREATE OR REPLACE TABLE ALL_TRIPS AS
  SELECT 
    VENDORID,
    TPEP_PICKUP_DATETIME AS PICKUP_DATETIME,
    TPEP_DROPOFF_DATETIME AS DROPOFF_DATETIME,
    PASSENGER_COUNT,
    TRIP_DISTANCE,
    RATECODEID,
    STORE_AND_FWD_FLAG,
    PULOCATIONID,
    DOLOCATIONID,
    PAYMENT_TYPE,
    FARE_AMOUNT,
    EXTRA,
    MTA_TAX,
    TIP_AMOUNT,
    TOLLS_AMOUNT,
    IMPROVEMENT_SURCHARGE,
    TOTAL_AMOUNT,
    CONGESTION_SURCHARGE,
    AIRPORT_FEE,
    NULL AS EHAIL_FEE,
    NULL AS TRIP_TYPE
  FROM YELLOW_RAW
  UNION ALL
  SELECT 
    VENDORID,
    LPEP_PICKUP_DATETIME AS PICKUP_DATETIME,
    LPEP_DROPOFF_DATETIME AS DROPOFF_DATETIME,
    PASSENGER_COUNT,
    TRIP_DISTANCE,
    RATECODEID,
    STORE_AND_FWD_FLAG,
    PULOCATIONID,
    DOLOCATIONID,
    PAYMENT_TYPE,
    FARE_AMOUNT,
    EXTRA,
    MTA_TAX,
    TIP_AMOUNT,
    TOLLS_AMOUNT,
    IMPROVEMENT_SURCHARGE,
    TOTAL_AMOUNT,
    CONGESTION_SURCHARGE,
    NULL AS AIRPORT_FEE,
    EHAIL_FEE,
    TRIP_TYPE
  FROM GREEN_RAW;

  CREATE OR REPLACE TABLE MERGE_LOG (
    execution_time TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    records_processed INTEGER,
    duplicates_found INTEGER,
    status STRING
);

      SELECT VENDORID,PICKUP_DATETIME,DROPOFF_DATETIME,PASSENGER_COUNT, COUNT(*) 
        FROM all_trips 
        GROUP BY VENDORID,PICKUP_DATETIME,DROPOFF_DATETIME, PASSENGER_COUNT
        HAVING COUNT(*) > 1;
  
  


  
  